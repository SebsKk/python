#source for the dataset https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/Data%20files/automobileEDA.csv

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
df = pd.read_csv('/Users/kaczm/Downloads/automobileEDA.csv')
df.head()

#first a linear regression model
from sklearn.linear_model import LinearRegression
d = LinearRegression()
X = df[['highway-mpg']]
Y = df['price']
d.fit(X,Y)
Yhat=d.predict(X)
Yhat[0:5]   
d.intercept_
d.coef_
# Price = 38423.31 - 821.73 x highway-mpg
d1 = LinearRegression()
X = df[['engine-size']]
Y = df[['price']]
d1.fit(X,Y)
Yhat = d1.predict(X)
d1.intercept_
d.coef_

#now let's check out how the price predictor looks like for the multilinear model
Z = df[['engine-size', 'curb-weight', 'highway-mpg','horsepower']]
d.fit(Z,Y)
d.intercept_
d.coef_
# Price = -15678.742628061467 + 52.65851272 x horsepower + 4.69878948 x curb-weight + 81.95906216 x engine-size + 33.58258185 x highway-mpg

#now let's do some visualization

import seaborn as sns
%matplotlib inline 
width = 12
height = 10
plt.figure(figsize=(width, height))
sns.regplot(x="highway-mpg", y="price", data=df)
plt.ylim(0,)

plt.figure(figsize=(width, height))
sns.regplot(x="peak-rpm", y="price", data=df)
plt.ylim(0,)

#linear model not good for the peak-rpm variable

df[['highway-mpg','peak-rpm','price']].corr()

#let's check whether linear model is fine for highway-mpg 
plt.figure(figsize=(width, height))
sns.residplot(df['highway-mpg'], df['price'])
plt.show()
#as it turns out, it's not 

#let's visualize multiple linear regression model now (by using a distribution plot)

Y_hat = d.predict(Z)
ax1 = sns.distplot(df['price'], hist=False, color="r", label="Actual Value")
sns.distplot(Y_hat, hist=False, color="b", label="Fitted Values" , ax=ax1)
#that's quite a nice prediction, lets label it too
plt.title('Actual vs Fitted Values for Price')
plt.xlabel('Price (in dollars)')
plt.ylabel('Proportion of Cars')

#multiple linear regression using pipeline
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
y = df['price']
Input=[('scale',StandardScaler()),('model',LinearRegression())]

pipe=Pipeline(Input)

pipe.fit(Z,y)

ypipe=pipe.predict(Z)
ypipe[0:10]

#how accurate is the model for highway-mpg
#R^2
d.fit(X,Y)
d.score(X,Y)
#Mean squared
Yhat=d.predict(X)
Yhat
from sklearn.metrics import mean_squared_error
mean_squared_error(Y,Yhat)

#for the multiple linear regression
#R^2
d.fit(Z,Y)
d.score(Z,Y)
#mean_squared
Yhat=d.predict(Z)
mean_squared_error(Y,Yhat)
